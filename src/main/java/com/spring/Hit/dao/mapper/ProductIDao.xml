<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- param앞에 #면 넘어온 값이 실제 칼럼 타입에 맞게 변환해서 입력. $면 전달되어 온 값의 타입 그대로 전달. param은 
	소문자 -->
<!-- ctrl + shift + X 누르면 대문자로 변경 -->
<mapper namespace="com.spring.Hit.dao.ProductIDao">
	<!-- sql 옵션 -->
	<sql id="menu">
		<if test="category != null">
			<if test="category == '꽃바구니'">
				where category = '꽃바구니'
			</if>
			<if test="category == '꽃다발'">
				where category = '꽃다발'
			</if>
			<if test="category == '꽃상자'">
				where category = '꽃상자'
			</if>
			<if test="category == '동양란'">
				where category = '동양란'
			</if>
			<if test="category == '서양란'">
				where category = '서양란'
			</if>
			<if test="category == '축하화환'">
				where category = '축하화환'
			</if>
			<if test="category == '근조화환'">
				where category = '근조화환'
			</if>
		</if>
	</sql>

	<!-- 상품 조회 쿼리 (list) -->
	<select id="listDao" resultType="com.spring.Hit.dto.ProductDto">
		select item_no, item_name, category, price, volume, img, reg_date,
		item_content
		from item_t
		<include refid="menu"></include>
		order by item_no desc
	</select>

	<!-- 상품 상세 정보 보기 , 상품 즉시 구매 (detail,buy) -->
	<select id="viewDao" resultType="com.spring.Hit.dto.ProductDto">
		select * from item_t where
		item_no = #{param1}
	</select>

	<!-- 하나의 상품 구매 -->
	<select id="oneDirectbuy">
		select * from item_t where item_no = #{item_no}
	</select>

	<!-- 상품명 검색 -->
	<select id="searchItem">
		select * from item_t where item_name = #{item_name}
	</select>




	<!-- 관리자 페이지 관리자 페이지 관리자 페이지 관리자 페이지 관리자 페이지 관리자 페이지 관리자 페이지 관리자 페이지 관리자 
		페이지 관리자 페이지 -->
	<!-- 상품 등록 쿼리 -->
	<insert id="writeDao">
		INSERT INTO item_t(item_no, item_name, category,
		price, volume, img)
		VALUES(item_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5})
	</insert>
	<!-- 상품 삭제 쿼리 -->
	<delete id="deleteDao">
		DELETE FROM item_t WHERE item_no = #{param1}
	</delete>
	<!-- 상품 수정 쿼리 -->
	<update id="updateDao">
		update
	</update>

	<!-- 리뷰 -->
	
	<!-- 리뷰 전체 목록(아이디) -->
	<select id="getReviewList" resultType="com.spring.Hit.dto.ReviewDto">
		select * from review_t where id = #{id}
	</select>

	<!-- 전체 리뷰 목록 -->
	<select id="selectAllReview" resultType="com.spring.Hit.dto.ReviewDto">
		select * from review_t
	</select>
	
	<!-- 상품별 리뷰 목록 -->
	<select id="getReview" resultType="com.spring.Hit.dto.ReviewDto" parameterType="java.lang.Integer">
		select * from review_t where item_no = #{item_no,jdbcType=VARCHAR}
	</select>
	
	<!-- 리뷰 추가 -->
	<insert id="addReview" parameterType="com.spring.Hit.dto.ReviewDto">
		insert into review_t
		values(review_seq.nextval, #{id}, #{item_no}, #{review_tit}, #{review_con}, #{review_img}, sysdate )
	</insert>
	
	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="com.spring.Hit.dto.ReviewDto">
		update review_t
		set review_con = ${review_con} where review_no = ${review_no}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="com.spring.Hit.dto.ReviewDto">
		delete from review_t where review_no=${review_no}
	</delete>
	
	<!-- 리뷰 갯수 // 페이징 처리 -->
	<select id="reviewCount" resultType="java.lang.Integer">
		select count(review_no) from review_t
	</select>
	
	<!-- boardList에서 여러개 삭제 -->
	<delete id="deleteList" parameterType="com.spring.Hit.dto.ReviewDto">
		delete from ${id}_t where ${id}_no = ${review_no}
	</delete>
	
	<!-- boardList에서 리뷰 한개 select -->
	<select id="selectReview" parameterType="java.lang.Integer" resultType="com.spring.Hit.dto.ReviewDto">
		select * from review_t where review_no = #{review_no}
	</select>
	
	<!-- 구매자 정보 (단일 구매) -->
	<select id="vmemDao" resultType="com.spring.Hit.dto.MemberDto"> 
		select id, name, email, phone
		from member_t where id = #{id} </select>
		
	<!-- 결제하기 -->
	<insert id="orderinsertDao"> 
		INSERT INTO order_t(order_no, item_no, id,
		order_vol, payment_way, payment_bool, payment_price, del_bool)
		VALUES(order_seq.nextval,#{item_no},#{id},#{order_vol},#{payment_way},'Y',#{payment_price}, 'N')
	</insert>
	
	<!-- 주문목록 -->
	<select id="vieworderDao" resultType="com.spring.Hit.dto.OrderDto"> 
		select * from order_t
		where id = #{id}
		order by order_no desc </select>
	
	<!-- 주문목록(최근) -->
	<select id="viewRecentOrderDao" resultType="com.spring.Hit.dto.OrderDto2"> 
		select order_no, o.item_no, i.item_name as item_name, id, order_vol, payment_bool, order_date,
		payment_price, img
		from order_t o, item_t i
		where order_no in (select order_no from order_t where id = #{id} and to_char(order_date,'YY/MM/DD')
		 >= (select sysdate - 90 from dual)) and o.item_no = i.item_no
		order by order_date desc 
	</select>	
	
	<!-- 결제 취소 -->
	<delete id="deleteorder"> 
		delete from order_t where order_no = #{order_no}
	</delete>
	
	<!--  주문 취소 대기 -->
	<update id="orderdel" parameterType="com.spring.Hit.dto.OrderDto">
		update order_t
		set
		cancel_bool = 'Y' where order_no = #{order_no}
	</update>

	<!--  재고 수량 빼기 -->
	<update id="minuspd" parameterType="com.spring.Hit.dto.OrderDto">
		update item_t
		set
		volume = volume-#{order_vol} where item_no = #{item_no}
	</update>
	
	<!--  재고 수량 더하기 -->
	<update id="pluspd" parameterType="com.spring.Hit.dto.OrderDto">
		update item_t
		set
		volume = volume+#{order_vol} where item_no = #{item_no}
	</update>
	
</mapper>